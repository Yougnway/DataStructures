# -*- coding: utf-8 -*-
'''
__author__ = 'Youngway'
'''

Class Solution:
  #----------1.冒泡排序----------
  def bubbleSort(self, list_test):
      for number in range(len(list_test)-1,0,-1):
          for i in range(number):
              if list_test[i]>list_test[i+1]:
                  temp = list_test[i]
                  list_test[i] = list_test[i+1]
                  list_test[i+1] = temp

  #----------2.短冒泡排序----------
  def shortBubbleSort(self, list_test):
      exchanges = True
      number = len(list_test)-1
      while number > 0 and exchanges:
         exchanges = False
         for i in range(number):
             if list_test[i]>list_test[i+1]:
                 exchanges = True
                 temp = list_test[i]
                 list_test[i] = list_test[i+1]
                 list_test[i+1] = temp
         number -= 1

  #-----------3.选择排序----------
  def selectionSort(self, list_test):
     for fillslot in range(len(list_test)-1,0,-1):
         positionOfMax=0
         for location in range(1,fillslot+1):
             if list_test[location]>list_test[positionOfMax]:
                 positionOfMax = location

         temp = list_test[fillslot]
         list_test[fillslot] = list_test[positionOfMax]
         list_test[positionOfMax] = temp
         
  #-----------4.插入排序-----------
  def insertionSort(self, list_test):
    for index in range(1,len(list_test)):
      current_value = list_test[index]
      position = index
      while position>0 and list_test[position-1]>current_value:
        list_test[position]=list_test[position-1]
        position -= 1
    list_test[position]=current_value

  # -----------5.归并排序-----------
  def mergeSort(self, list_list):
      if len(list_list)>1:
          mid = len(list_list)//2
          lefthalf = list_list[:mid]
          righthalf = list_list[mid:]
          
          mergeSort(lefthalf)
          mergeSort(righthalf)
          
          i, j, k = 0, 0, 0
          while i < len(lefthalf) and j < len(righthalf):
              if lefthalf[i] < righthalf[j]:
                  list_list[k] = lefthalf[i]
                  i += 1
              else:
                  list_list[k] = righthalf[j]
                  j += 1
              k += 1

          while i < len(lefthalf):
              list_list[k] = lefthalf[i]
              i += 1
              k += 1

          while j < len(righthalf):
              list_list[k]=righthalf[j]
              j += 1
              k += 1
              
  # -----------6.快速排序-----------
  def quickSort(test_list):
      quickSortHelper(test_list, 0, len(test_list)-1)

  def quickSortHelper(test_list, first, last):
      if first < last:
          separatePoint = partition(test_list, first, last)
          quickSortHelper(test_list, first, separatePoint - 1)
          quickSortHelper(test_list, separatePoint + 1, last)

  def partition(test_list, first, last):
      current_value = test_list[first]
      left = first + 1
      right = last

      finished = False
      while not finished:
          while left <= right and test_list[left] <= current_value:
              left += 1
          while test_list[right] >= current_value and right >= left:
              right -= 1
          if right < left:
              finished = True
          else:
              temp = test_list[left]
              test_list[left] = test_list[right]
              test_list[right] = temp
      temp = test_list[first]
      test_list[first] = test_list[right]
      test_list[right] = temp

      return right


# -----------test-----------
s = Solution()
list_test = [54,26,93,17,77,31,44,55,20]
l1 = s.bubbleSort(list_test)
l2 = s.shortBubbleSort(list_test)
l3 = s.selectionSort(list_test)
l4 = s.insertionSort(list_test)
l5 = s.mergeSort(list_test)
l6 = s.quickSort(list_test)
